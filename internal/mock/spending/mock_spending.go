// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Onton\route256\internal\model\spending\spending.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSpendingSpender is a mock of SpendingSpender interface.
type MockSpendingSpender struct {
	ctrl     *gomock.Controller
	recorder *MockSpendingSpenderMockRecorder
}

// MockSpendingSpenderMockRecorder is the mock recorder for MockSpendingSpender.
type MockSpendingSpenderMockRecorder struct {
	mock *MockSpendingSpender
}

// NewMockSpendingSpender creates a new mock instance.
func NewMockSpendingSpender(ctrl *gomock.Controller) *MockSpendingSpender {
	mock := &MockSpendingSpender{ctrl: ctrl}
	mock.recorder = &MockSpendingSpenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpendingSpender) EXPECT() *MockSpendingSpenderMockRecorder {
	return m.recorder
}

// SendSpending mocks base method.
func (m *MockSpendingSpender) SendSpending(userId, sum int64, spendingType string, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSpending", userId, sum, spendingType, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSpending indicates an expected call of SendSpending.
func (mr *MockSpendingSpenderMockRecorder) SendSpending(userId, sum, spendingType, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSpending", reflect.TypeOf((*MockSpendingSpender)(nil).SendSpending), userId, sum, spendingType, date)
}
